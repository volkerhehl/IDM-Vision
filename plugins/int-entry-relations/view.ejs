<% if (plugin.fromEntry) { %>
    <div class="row">
      <div class="col">
        <% if (plugin.from.invRef || plugin.to.invRef) { %>
            <div class="alert alert-dismissible alert-danger">
              Broken references! Check <strong>reftypes</strong>.
            </div>
        <% } %>
        <% if (plugin.from.badExec || plugin.to.badExec) { %>
            <div class="alert alert-dismissible alert-warning">
              Note pending or failed <strong>exec states</strong>.
            </div>
        <% } %>
      </div>
    </div>

    <div class="row">
      <div class="col" id="from-entry-table">
        <h5>From this entry</h5>
        <tooled-table :rows="rows" :columns="columns" :rightadd="rightadd"></tooled-table>
      </div>
    </div>

    <div class="row">
      <div class="col" id="to-entry-table">
        <h5>To this entry</h5>
        <% if (plugin.requestCount == 3000) { %>
            <div class="alert alert-dismissible alert-warning">
              Request objects (RQ:) are limited to 3000!
            </div>
        <% } %>
        <tooled-table :rows="rows" :columns="columns" :rightadd="rightadd"></tooled-table>
      </div>
    </div>

    <script>
        var fromEntry = <%- JSON.stringify(plugin.fromEntry) %>;
        var toEntry = <%- JSON.stringify(plugin.toEntry) %>;
        var cmpFromButton = <%- JSON.stringify(helper.compareButton("from")) %>;
        var cmpToButton = <%- JSON.stringify(helper.compareButton("to")) %>;
    </script>

    <script>
        function refCounter(row) {
            let result = []

            function build(name, number) {
                return '(' + name + ': ' + number + ')'
            }

            if (row.mcAssignedDirect > 0) {
                result.push(build('dir', row.mcAssignedDirect))
            }

            if (row.mcAssignedDynamicGroup > 0) {
                result.push(build('dg', row.mcAssignedDynamicGroup))
            }

            if (row.mcAssignedInheritCount > 0) {
                result.push(build('inh', row.mcAssignedInheritCount))
            }

            if (row.mcOrphan > 0) {
                result.push(helper.badge('danger', 'ORPHAN'))
            }

            if (result.length == 0) {
                result.push(helper.badge('danger', 'NO REF!'))
            }

            return result.join(' ')
        }


        var vappFrom = new Vue({
            el: '#from-entry-table',
            data: {
                rows: fromEntry,
                rightadd: cmpFromButton,
                columns: [
                    {
                        title: 'ID',
                        field: 'mcUniqueID',
                        sort: 'mcUniqueID'
                    },
                    {
                        title: 'Attribute',
                        field: 'AttrName'
                    },
                    {
                        title: 'Type',
                        field: 'entrytype',
                        hidden: true,
                    },
                    {
                        title: 'MSKEYVALUE',
                        field: row => helper.makeMskeyLink(row.MSKEY, row.MSKEYVALUE)
                    },
                    {
                        title: 'Displayname',
                        field: 'DISPLAYNAME',
                        hidden: true,
                    },
                    {
                        title: 'Logonalias',
                        field: 'LOGONALIAS',
                        hidden: true,
                    },
                    {
                        title: 'AD Object',
                        field: 'AD_OBJECT',
                        hidden: true,
                    },
                    {
                        title: 'Firstname',
                        field: 'MX_FIRSTNAME',
                        hidden: true,
                    },
                    {
                        title: 'Lastname',
                        field: 'MX_LASTNAME',
                        hidden: true,
                    },
                    {
                        title: 'Reftype',
                        field: row => refCounter(row)
                    },
                    {
                        title: 'Valid from',
                        field: row => helper.dateFormat(row.mcValidFrom),
                        sort: 'mcValidFrom'
                    },
                    {
                        title: 'Valid to',
                        field: row => helper.dateFormat(row.mcValidTo),
                        sort: 'mcValidTo'
                    },
                    {
                        title: 'CTX',
                        field: row => helper.makeMskeyLink(row.mcContextMSKEY, row.CTX)
                    },
                    {
                        title: 'Modified',
                        field: row => helper.dateFormat(row.mcModifyTime),
                        sort: 'mcModifyTime'
                    },
                    {
                        title: 'Process info',
                        field: row => helper.makeProcessInfoLink(row.mcProcessInfo)
                    },
                    {
                        title: 'Reason',
                        field: 'mcReason'
                    },
                    {
                        title: 'Link',
                        field: row => helper.linkStateBadge(row.mcLinkState)
                    },
                    {
                        title: 'Exec',
                        field: row => helper.execStateBadge(row.mcExecState)
                    }
                ]
            }
        })

        var vappTo = new Vue({
            el: '#to-entry-table',
            data: {
                rows: toEntry,
                rightadd: cmpToButton,
                columns: [
                    {
                        title: 'ID',
                        field: 'mcUniqueID',
                        sort: 'mcUniqueID'
                    },
                    {
                        title: 'Attribute',
                        field: 'AttrName'
                    },
                    {
                        title: 'Type',
                        field: 'entrytype',
                        hidden: true,
                    },
                    {
                        title: 'MSKEYVALUE',
                        field: row => helper.makeMskeyLink(row.MSKEY, row.MSKEYVALUE)
                    },
                    {
                        title: 'Displayname',
                        field: 'DISPLAYNAME',
                        hidden: true,
                    },
                    {
                        title: 'Logonalias',
                        field: 'LOGONALIAS',
                        hidden: true,
                    },
                    {
                        title: 'AD Object',
                        field: 'AD_OBJECT',
                        hidden: true,
                    },
                    {
                        title: 'Firstname',
                        field: 'MX_FIRSTNAME',
                        hidden: true,
                    },
                    {
                        title: 'Lastname',
                        field: 'MX_LASTNAME',
                        hidden: true,
                    },
                    {
                        title: 'Reftype',
                        field: row => refCounter(row)
                    },
                    {
                        title: 'Valid from',
                        field: row => helper.dateFormat(row.mcValidFrom),
                        sort: 'mcValidFrom'
                    },
                    {
                        title: 'Valid to',
                        field: row => helper.dateFormat(row.mcValidTo),
                        sort: 'mcValidTo'
                    },
                    {
                        title: 'CTX',
                        field: row => helper.makeMskeyLink(row.mcContextMSKEY, row.CTX)
                    },
                    {
                        title: 'Modified',
                        field: row => helper.dateFormat(row.mcModifyTime),
                        sort: 'mcModifyTime'
                    },
                    {
                        title: 'Process info',
                        field: row => helper.makeProcessInfoLink(row.mcProcessInfo)
                    },
                    {
                        title: 'Reason',
                        field: 'mcReason'
                    },
                    {
                        title: 'Link',
                        field: row => helper.linkStateBadge(row.mcLinkState)
                    },
                    {
                        title: 'Exec',
                        field: row => helper.execStateBadge(row.mcExecState)
                    }
                ]
            }
        })
    </script>
<% } %>

<% if (plugin.compared) { %>
    <%- include(views('snippets/compare-header'), {
        left: plugin.entry,
        right: plugin.compareEntry,
        title: plugin.title
    }) %>

    <div class="row">
      <div class="col" id="vue-app">
        <diff-table :rows="rows" :columns="columns"></diff-table>
      </div>
    </div>

    <script>
        var compared = <%- JSON.stringify(plugin.compared) %>;
    </script>

    <script>
        var vapp = new Vue({
            el: '#vue-app',
            data: {
                rows: compared,
                columns: [
                    {
                        title: 'Attribute',
                        field: 'AttrName'
                    },
                    {
                        title: 'Type',
                        field: 'entrytype',
                        hidden: true,
                    },
                    {
                        title: 'MSKEYVALUE',
                        field: row => helper.makeMskeyLink(row.MSKEY, row.MSKEYVALUE)
                    },
                    {
                        title: 'Displayname',
                        field: 'DISPLAYNAME',
                        hidden: true,
                    }
                ]
            }
        })
    </script>
<% } %>
